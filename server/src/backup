#include <iostream>
#include <string>
#include <vector>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <cstring>
#include <thread>
#include <mutex>
#include <chrono>
#include <map>

std::vector<std::vector<int>> groups; // Grupy po 4 graczy
std::vector<std::string> player_nicks; // Lista wszystkich nicków
std::map<int, bool> group_started; // Map to track if a group's game has started
std::mutex mtx;

void send_to_all(const std::string& message) {
    for (const auto& group : groups) {
        for (int client_socket : group) {
            send(client_socket, message.c_str(), message.size(), 0);
        }
    }
}

void send_to_group(const std::string& message, int group_index) {
    for (int client_socket : groups[group_index]) {
        send(client_socket, message.c_str(), message.size(), 0);
    }
}

void start_game_timer(int group_index) {
    for (int i = 30; i > 0; --i) {
        mtx.lock();
        if (group_started[group_index]) {
            mtx.unlock();
            return; // Stop the timer if the game has already started
        }
        std::string message = "Game starts in: " + std::to_string(i) + " seconds";
        send_to_group(message, group_index);
        mtx.unlock();
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }

    mtx.lock();
    group_started[group_index] = true;
    send_to_group("Game started", group_index);
    mtx.unlock();
}

void handle_client(int client_socket) {
    char buffer[1024] = {0};
    read(client_socket, buffer, 1024);
    std::string nick(buffer);

    mtx.lock();
    player_nicks.push_back(nick);
    if (player_nicks.size() % 4 == 1) {
        groups.push_back(std::vector<int>());
    }
    int group_index = groups.size() - 1;
    groups.back().push_back(client_socket);

    if (groups[group_index].size() == 2 && !group_started[group_index]) {
        std::thread timer_thread(start_game_timer, group_index);
        timer_thread.detach();
    }

    if (group_started[group_index]) {
        send(client_socket, "Game already started", strlen("Game already started"), 0);
        close(client_socket);
        mtx.unlock();
        return;
    }

    std::string message = "Aktualna lista klientów: ";
    for (const auto& n : player_nicks) {
        message += n + ", ";
    }
    send_to_group(message, group_index);

    if (player_nicks.size() % 4 == 0) {
        send_to_group("Skład pełen", group_index);
    }
    mtx.unlock();

    std::cout << "Nick received: " << nick << std::endl;
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);

    // Tworzenie gniazda serwera
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Opcje gniazda
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8000);

    // Bindowanie gniazda do portu 8000
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Nasłuchiwanie
    if (listen(server_fd, 10) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    while (true) {
        // Akceptacja połączenia od klienta
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        std::thread client_thread(handle_client, new_socket);
        client_thread.detach();
    }

    // Ta część kodu jest teraz nieosiągalna, ale pozostaje dla kompletności
    // Zamykanie gniazd klientów i serwera
    for (auto& group : groups) {
        for (int client_socket : group) {
            close(client_socket);
        }
    }
    close(server_fd);

    return 0;
}